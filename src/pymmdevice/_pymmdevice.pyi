from __future__ import annotations

import typing

import numpy
import typing_extensions

__all__ = [
    "AutoFocusInstance",
    "Callable",
    "CameraInstance",
    "Core",
    "DEVICE_INTERFACE_VERSION",
    "Device",
    "DeviceDetectionStatus",
    "DeviceInstance",
    "DeviceManager",
    "DeviceType",
    "FocusDirection",
    "GalvoInstance",
    "GenericInstance",
    "HubInstance",
    "ImageProcessorInstance",
    "LoadedDeviceAdapter",
    "Logger",
    "MMThreadLock",
    "MagnifierInstance",
    "MockCMMCore",
    "PluginManager",
    "PortType",
    "PropertyType",
    "SLMInstance",
    "SerialInstance",
    "ShutterInstance",
    "SignalIOInstance",
    "StageInstance",
    "StateInstance",
    "XYStageInstance",
]

class AutoFocusInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def AutoSetParameters(self) -> int: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def FullFocus(self) -> int: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetContinuousFocusing(self) -> bool: ...
    def GetCurrentFocusScore(self) -> float: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetLastFocusScore(self) -> float: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetOffset(self) -> float: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def IncrementalFocus(self) -> int: ...
    def Initialize(self) -> None: ...
    def IsContinuousFocusLocked(self) -> bool: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetContinuousFocusing(self, state: bool) -> int: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetOffset(self, offset: float) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> AutoFocusInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class Callable:
    pass

class CameraInstance:
    def AddTag(self, arg0: str, arg1: str, arg2: str) -> None: ...
    def AddToExposureSequence(self, arg0: float) -> int: ...
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearExposureSequence(self) -> int: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def ClearROI(self) -> int: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetBinning(self) -> int: ...
    def GetBitDepth(self) -> int: ...
    def GetChannelName(self, arg0: int) -> str: ...
    def GetComponentName(self, arg0: int) -> str: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetExposure(self) -> float: ...
    def GetExposureSequenceMaxLength(self, arg0: int) -> int: ...
    def GetImageArray(self, arg: int = 0) -> numpy.ndarray: ...
    @typing.overload
    def GetImageBuffer(self) -> int: ...
    @typing.overload
    def GetImageBuffer(self, arg0: int) -> int: ...
    def GetImageBufferAsRGB32(self) -> int: ...
    def GetImageBufferSize(self) -> int: ...
    def GetImageBytesPerPixel(self) -> int: ...
    def GetImageHeight(self) -> int: ...
    def GetImageWidth(self) -> int: ...
    def GetLabel(self) -> str: ...
    def GetMultiROI(
        self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int
    ) -> int: ...
    def GetMultiROICount(self, arg0: int) -> int: ...
    def GetName(self) -> str: ...
    def GetNumberOfChannels(self) -> int: ...
    def GetNumberOfComponents(self) -> int: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetPixelSizeUm(self) -> float: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetROI(self) -> tuple[int, int, int, int]: ...
    def GetRawPtr(self) -> Device: ...
    def GetTags(self) -> str: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsCapturing(self) -> bool: ...
    def IsExposureSequenceable(self, arg0: bool) -> int: ...
    def IsInitialized(self) -> bool: ...
    def IsMultiROISet(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def PrepareSequenceAcquisition(self) -> int: ...
    def RemoveTag(self, arg0: str) -> None: ...
    def SendExposureSequence(self) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetBinning(self, arg0: int) -> int: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetExposure(self, arg0: float) -> None: ...
    def SetMultiROI(
        self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int
    ) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def SetROI(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...
    def Shutdown(self) -> None: ...
    def SnapImage(self) -> int: ...
    def StartExposureSequence(self) -> int: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    @typing.overload
    def StartSequenceAcquisition(self, arg0: int, arg1: float, arg2: bool) -> int: ...
    @typing.overload
    def StartSequenceAcquisition(self, arg0: float) -> int: ...
    def StopExposureSequence(self) -> int: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def StopSequenceAcquisition(self) -> int: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def SupportsMultiROI(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> CameraInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class Core:
    pass

class Device:
    pass

class DeviceDetectionStatus:
    """
    Members:

      Misconfigured

      Unimplemented

      CanNotCommunicate

      CanCommunicate
    """

    CanCommunicate: typing.ClassVar[
        DeviceDetectionStatus
    ]  # value = <DeviceDetectionStatus.CanCommunicate: 1>
    CanNotCommunicate: typing.ClassVar[
        DeviceDetectionStatus
    ]  # value = <DeviceDetectionStatus.CanNotCommunicate: 0>
    Misconfigured: typing.ClassVar[
        DeviceDetectionStatus
    ]  # value = <DeviceDetectionStatus.Misconfigured: -1>
    Unimplemented: typing.ClassVar[
        DeviceDetectionStatus
    ]  # value = <DeviceDetectionStatus.Unimplemented: -2>
    __members__: typing.ClassVar[
        dict[str, DeviceDetectionStatus]
    ]  # value = {'Misconfigured': <DeviceDetectionStatus.Misconfigured: -1>, 'Unimplemented': <DeviceDetectionStatus.Unimplemented: -2>, 'CanNotCommunicate': <DeviceDetectionStatus.CanNotCommunicate: 0>, 'CanCommunicate': <DeviceDetectionStatus.CanCommunicate: 1>}
    def __eq__(self, other: typing.Any) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: typing.Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class DeviceInstance:
    pass

class DeviceManager:
    def GetCameraDevice(self, device: DeviceInstance) -> CameraInstance:
        """
        Get a device by label, requiring a specific type.
        """
    def GetDevice(self, label: str) -> DeviceInstance:
        """
        Get a device by label.
        """
    def GetDeviceList(self, t: DeviceType = ...) -> list[str]:
        """
        Get the labels of all loaded devices of a given type.
        """
    def GetDeviceOfType(self, label: str, device_type: DeviceType) -> DeviceInstance:
        """
        Get a device by label, requiring a specific type.
        """
    def GetLoadedPeripherals(self, hubLabel: str) -> list[str]:
        """
        Get the labels of all loaded peripherals of a hub device.
        """
    @typing.overload
    def GetParentDevice(self, arg0: StageInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: HubInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: CameraInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: XYStageInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: ImageProcessorInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: MagnifierInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: SignalIOInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: ShutterInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: AutoFocusInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: StateInstance) -> HubInstance: ...
    @typing.overload
    def GetParentDevice(self, arg0: GalvoInstance) -> HubInstance: ...
    def GetStageDevice(self, device: DeviceInstance) -> StageInstance:
        """
        Get a device by label, requiring a specific type.
        """
    def LoadDevice(
        self, module: LoadedDeviceAdapter, deviceName: str, label: str
    ) -> DeviceInstance:
        """
        Load the specified device and assign a device label.
        """
    def UnloadAllDevices(self) -> None:
        """
        Unload all devices.
        """
    def UnloadDevice(self, device: DeviceInstance) -> None:
        """
        Unload a device.
        """
    def __enter__(self) -> DeviceManager: ...
    def __exit__(self, *args) -> None: ...
    def __init__(self) -> None: ...

class DeviceType:
    """
    Members:

      UnknownType

      AnyType

      CameraDevice

      ShutterDevice

      StateDevice

      StageDevice

      XYStageDevice

      SerialDevice

      GenericDevice

      AutoFocusDevice

      CoreDevice

      ImageProcessorDevice

      SignalIODevice

      MagnifierDevice

      SLMDevice

      HubDevice

      GalvoDevice
    """

    AnyType: typing.ClassVar[DeviceType]  # value = <DeviceType.AnyType: 1>
    AutoFocusDevice: typing.ClassVar[
        DeviceType
    ]  # value = <DeviceType.AutoFocusDevice: 9>
    CameraDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.CameraDevice: 2>
    CoreDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.CoreDevice: 10>
    GalvoDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.GalvoDevice: 16>
    GenericDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.GenericDevice: 8>
    HubDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.HubDevice: 15>
    ImageProcessorDevice: typing.ClassVar[
        DeviceType
    ]  # value = <DeviceType.ImageProcessorDevice: 11>
    MagnifierDevice: typing.ClassVar[
        DeviceType
    ]  # value = <DeviceType.MagnifierDevice: 13>
    SLMDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.SLMDevice: 14>
    SerialDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.SerialDevice: 7>
    ShutterDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.ShutterDevice: 3>
    SignalIODevice: typing.ClassVar[
        DeviceType
    ]  # value = <DeviceType.SignalIODevice: 12>
    StageDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.StageDevice: 5>
    StateDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.StateDevice: 4>
    UnknownType: typing.ClassVar[DeviceType]  # value = <DeviceType.UnknownType: 0>
    XYStageDevice: typing.ClassVar[DeviceType]  # value = <DeviceType.XYStageDevice: 6>
    __members__: typing.ClassVar[
        dict[str, DeviceType]
    ]  # value = {'UnknownType': <DeviceType.UnknownType: 0>, 'AnyType': <DeviceType.AnyType: 1>, 'CameraDevice': <DeviceType.CameraDevice: 2>, 'ShutterDevice': <DeviceType.ShutterDevice: 3>, 'StateDevice': <DeviceType.StateDevice: 4>, 'StageDevice': <DeviceType.StageDevice: 5>, 'XYStageDevice': <DeviceType.XYStageDevice: 6>, 'SerialDevice': <DeviceType.SerialDevice: 7>, 'GenericDevice': <DeviceType.GenericDevice: 8>, 'AutoFocusDevice': <DeviceType.AutoFocusDevice: 9>, 'CoreDevice': <DeviceType.CoreDevice: 10>, 'ImageProcessorDevice': <DeviceType.ImageProcessorDevice: 11>, 'SignalIODevice': <DeviceType.SignalIODevice: 12>, 'MagnifierDevice': <DeviceType.MagnifierDevice: 13>, 'SLMDevice': <DeviceType.SLMDevice: 14>, 'HubDevice': <DeviceType.HubDevice: 15>, 'GalvoDevice': <DeviceType.GalvoDevice: 16>}
    def __eq__(self, other: typing.Any) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: typing.Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class FocusDirection:
    """
    Members:

      FocusDirectionUnknown

      FocusDirectionTowardSample

      FocusDirectionAwayFromSample
    """

    FocusDirectionAwayFromSample: typing.ClassVar[
        FocusDirection
    ]  # value = <FocusDirection.FocusDirectionAwayFromSample: 2>
    FocusDirectionTowardSample: typing.ClassVar[
        FocusDirection
    ]  # value = <FocusDirection.FocusDirectionTowardSample: 1>
    FocusDirectionUnknown: typing.ClassVar[
        FocusDirection
    ]  # value = <FocusDirection.FocusDirectionUnknown: 0>
    __members__: typing.ClassVar[
        dict[str, FocusDirection]
    ]  # value = {'FocusDirectionUnknown': <FocusDirection.FocusDirectionUnknown: 0>, 'FocusDirectionTowardSample': <FocusDirection.FocusDirectionTowardSample: 1>, 'FocusDirectionAwayFromSample': <FocusDirection.FocusDirectionAwayFromSample: 2>}
    def __eq__(self, other: typing.Any) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: typing.Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class GalvoInstance:
    def AddPolygonVertex(self, polygonIndex: int, x: float, y: float) -> int: ...
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DeletePolygons(self) -> int: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetChannel(self) -> str: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetPosition(self) -> tuple[float, float]: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def GetXMinimum(self) -> float: ...
    def GetXRange(self) -> float: ...
    def GetYMinimum(self) -> float: ...
    def GetYRange(self) -> float: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LoadPolygons(self) -> int: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def PointAndFire(self, x: float, y: float, time_us: float) -> int: ...
    def RunPolygons(self) -> int: ...
    def RunSequence(self) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetIlluminationState(self, on: bool) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetPolygonRepetitions(self, repetitions: int) -> int: ...
    def SetPosition(self, x: float, y: float) -> int: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def SetSpotInterval(self, pulseInterval_us: float) -> int: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def StopSequence(self) -> int: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> GalvoInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class GenericInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> GenericInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class HubInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetInstalledPeripheralNames(self) -> list[str]: ...
    def GetLabel(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> HubInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class ImageProcessorInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def Process(self, buffer: int, width: int, height: int, byteDepth: int) -> None: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> ImageProcessorInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class LoadedDeviceAdapter:
    @staticmethod
    def from_file(filename: str, moduleName: str = "") -> LoadedDeviceAdapter: ...
    def GetAdvertisedDeviceType(self, deviceName: str) -> DeviceType: ...
    def GetAvailableDeviceNames(self) -> list[str]: ...
    def GetDeviceDescription(self, deviceName: str) -> str: ...
    def GetLock(self) -> MMThreadLock: ...
    def GetName(self) -> str: ...
    def LoadDevice(self, name: str, label: str) -> DeviceInstance: ...
    def Unload(self) -> None: ...
    def __init__(self, arg0: str, arg1: str) -> None: ...
    def load_camera(self, name: str, label: str) -> CameraInstance: ...

class Logger:
    pass

class MMThreadLock:
    pass

class MagnifierInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetMagnification(self) -> float: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> MagnifierInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class MockCMMCore:
    pass

class PluginManager:
    def GetAvailableDeviceAdapters(self) -> list[str]: ...
    def GetDeviceAdapter(self, moduleName: str) -> LoadedDeviceAdapter: ...
    def GetSearchPaths(self) -> list[str]: ...
    def SetSearchPaths(self, paths: typing.Iterable) -> None: ...
    def UnloadPluginLibrary(self, moduleName: str) -> None: ...
    def __init__(self) -> None: ...

class PortType:
    """
    Members:

      InvalidPort

      SerialPort

      USBPort

      HIDPort
    """

    HIDPort: typing.ClassVar[PortType]  # value = <PortType.HIDPort: 3>
    InvalidPort: typing.ClassVar[PortType]  # value = <PortType.InvalidPort: 0>
    SerialPort: typing.ClassVar[PortType]  # value = <PortType.SerialPort: 1>
    USBPort: typing.ClassVar[PortType]  # value = <PortType.USBPort: 2>
    __members__: typing.ClassVar[
        dict[str, PortType]
    ]  # value = {'InvalidPort': <PortType.InvalidPort: 0>, 'SerialPort': <PortType.SerialPort: 1>, 'USBPort': <PortType.USBPort: 2>, 'HIDPort': <PortType.HIDPort: 3>}
    def __eq__(self, other: typing.Any) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: typing.Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PropertyType:
    """
    Members:

      Undef

      String

      Float

      Integer
    """

    Float: typing.ClassVar[PropertyType]  # value = <PropertyType.Float: 2>
    Integer: typing.ClassVar[PropertyType]  # value = <PropertyType.Integer: 3>
    String: typing.ClassVar[PropertyType]  # value = <PropertyType.String: 1>
    Undef: typing.ClassVar[PropertyType]  # value = <PropertyType.Undef: 0>
    __members__: typing.ClassVar[
        dict[str, PropertyType]
    ]  # value = {'Undef': <PropertyType.Undef: 0>, 'String': <PropertyType.String: 1>, 'Float': <PropertyType.Float: 2>, 'Integer': <PropertyType.Integer: 3>}
    def __eq__(self, other: typing.Any) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: typing.Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class SLMInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def AddToSLMSequence(self, pixels: typing_extensions.Buffer) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def ClearSLMSequence(self) -> int: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def DisplayImage(self) -> int: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetBytesPerPixel(self) -> int: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetExposure(self) -> float: ...
    def GetHeight(self) -> int: ...
    def GetLabel(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNumberOfComponents(self) -> int: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetSLMSequenceMaxLength(self) -> int: ...
    def GetType(self) -> DeviceType: ...
    def GetWidth(self) -> int: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def IsSLMSequenceable(self) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SendSLMSequence(self) -> int: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetExposure(self, interval_ms: float) -> int: ...
    def SetImage(self, pixels: typing_extensions.Buffer) -> None: ...
    def SetParentID(self, arg0: str) -> None: ...
    @typing.overload
    def SetPixelsTo(self, intensity: int) -> int: ...
    @typing.overload
    def SetPixelsTo(self, red: int, green: int, blue: int) -> int: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StartSLMSequence(self) -> int: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def StopSLMSequence(self) -> int: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> SLMInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class SerialInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetAnswer(self, term: str) -> str: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetPortType(self) -> PortType: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def Purge(self) -> int: ...
    def Read(self) -> list[str]: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetCommand(self, command: str, term: str) -> int: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def Write(self, data: str) -> int: ...
    def __enter__(self) -> SerialInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class ShutterInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def Fire(self, deltaT: float) -> int: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetOpen(self) -> bool: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetOpen(self, open: bool) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> ShutterInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class SignalIOInstance:
    def AddToDASequence(self, voltage: float) -> int: ...
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearDASequence(self) -> int: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDASequenceMaxLength(self) -> int: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetGateOpen(self) -> bool: ...
    def GetLabel(self) -> str: ...
    def GetLimits(self) -> tuple[float, float]: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetSignal(self) -> float: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsDASequenceable(self) -> bool: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendDASequence(self) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetGateOpen(self, open: bool = True) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def SetSignal(self, volts: float) -> int: ...
    def Shutdown(self) -> None: ...
    def StartDASequence(self) -> int: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopDASequence(self) -> int: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> SignalIOInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class StageInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def AddToStageSequence(self, position: float) -> int: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def ClearStageSequence(self) -> int: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetFocusDirection(self) -> FocusDirection: ...
    def GetLabel(self) -> str: ...
    def GetLimits(self) -> tuple[float, float]: ...
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetPositionSteps(self) -> int: ...
    def GetPositionUm(self) -> float: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetStageSequenceMaxLength(self) -> int: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Home(self) -> int: ...
    def Initialize(self) -> None: ...
    def IsContinuousFocusDrive(self) -> bool: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def IsStageLinearSequenceable(self) -> bool: ...
    def IsStageSequenceable(self) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def Move(self, velocity: float) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SendStageSequence(self) -> int: ...
    def SetAdapterOriginUm(self, d: float) -> int: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetFocusDirection(self, direction: FocusDirection) -> None: ...
    def SetOrigin(self) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetPositionSteps(self, steps: int) -> int: ...
    def SetPositionUm(self, pos: float) -> int: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def SetRelativePositionUm(self, d: float) -> int: ...
    def SetStageLinearSequence(self, dZ_um: float, nSlices: int) -> int: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StartStageSequence(self) -> int: ...
    def Stop(self) -> int: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def StopStageSequence(self) -> int: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> StageInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class StateInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetGateOpen(self) -> bool: ...
    def GetLabel(self) -> str: ...
    def GetLabelPosition(self, label: str) -> int: ...
    def GetName(self) -> str: ...
    def GetNumberOfPositions(self) -> int: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetPosition(self) -> int: ...
    @typing.overload
    def GetPositionLabel(self) -> str: ...
    @typing.overload
    def GetPositionLabel(self, pos: int) -> str: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetType(self) -> DeviceType: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetGateOpen(self, open: bool = True) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    @typing.overload
    def SetPosition(self, pos: int) -> int: ...
    @typing.overload
    def SetPosition(self, label: str) -> int: ...
    def SetPositionLabel(self, pos: int, label: str) -> int: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> StateInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

class XYStageInstance:
    def AddToPropertySequence(self, arg0: str, arg1: str) -> None: ...
    def AddToXYStageSequence(self, positionX: float, positionY: float) -> int: ...
    def Busy(self) -> bool: ...
    def ClearPropertySequence(self, arg0: str) -> None: ...
    def ClearXYStageSequence(self) -> int: ...
    def DetectDevice(self) -> DeviceDetectionStatus: ...
    def GetAdapterModule(self) -> LoadedDeviceAdapter: ...
    def GetDelayMs(self) -> float: ...
    def GetDescription(self) -> str: ...
    def GetErrorText(self, arg0: int) -> str: ...
    def GetLabel(self) -> str: ...
    def GetLimitsUm(self) -> tuple[float, float, float, float]:
        """
        Return limits of the XY stage in um (xMin, xMax, yMin, yMax)
        """
    def GetName(self) -> str: ...
    def GetNumberOfPropertyValues(self, arg0: str) -> int: ...
    def GetParentID(self) -> str: ...
    def GetPositionSteps(self) -> tuple[int, int]: ...
    def GetPositionUm(self) -> tuple[float, float]: ...
    def GetProperty(self, arg0: str) -> str: ...
    def GetPropertyInitStatus(self, arg0: str) -> bool: ...
    def GetPropertyLowerLimit(self, arg0: str) -> float: ...
    def GetPropertyNames(self) -> list[str]: ...
    def GetPropertyReadOnly(self, arg0: str) -> bool: ...
    def GetPropertySequenceMaxLength(self, arg0: str) -> int: ...
    def GetPropertyType(self, arg0: str) -> PropertyType: ...
    def GetPropertyUpperLimit(self, arg0: str) -> float: ...
    def GetPropertyValueAt(self, arg0: str, arg1: int) -> str: ...
    def GetRawPtr(self) -> Device: ...
    def GetStepSize(self) -> tuple[float, float]: ...
    def GetStepSizeXUm(self) -> float: ...
    def GetStepSizeYUm(self) -> float: ...
    def GetType(self) -> DeviceType: ...
    def GetXYStageSequenceMaxLength(self) -> int: ...
    def HasInitializationBeenAttempted(self) -> bool: ...
    def HasProperty(self, arg0: str) -> bool: ...
    def HasPropertyLimits(self, arg0: str) -> bool: ...
    def Initialize(self) -> None: ...
    def IsInitialized(self) -> bool: ...
    def IsPropertySequenceable(self, arg0: str) -> bool: ...
    def IsXYStageSequenceable(self) -> bool: ...
    def LogMessage(self, arg0: str, arg1: bool) -> int: ...
    def SendPropertySequence(self, arg0: str) -> None: ...
    def SendXYStageSequence(self) -> int: ...
    def SetAdapterOriginUm(self, x: float, y: float) -> int: ...
    def SetCallback(self, arg0: Core) -> None: ...
    def SetDelayMs(self, arg0: float) -> None: ...
    def SetDescription(self, arg0: str) -> None: ...
    def SetOrigin(self) -> int: ...
    def SetParentID(self, arg0: str) -> None: ...
    def SetPositionSteps(self, x: int, y: int) -> int: ...
    def SetPositionUm(self, x: float, y: float) -> int: ...
    def SetProperty(self, arg0: str, arg1: str) -> None: ...
    def SetRelativePositionUm(self, dx: float, dy: float) -> int: ...
    def Shutdown(self) -> None: ...
    def StartPropertySequence(self, arg0: str) -> None: ...
    def StartXYStageSequence(self) -> int: ...
    def StopPropertySequence(self, arg0: str) -> None: ...
    def StopXYStageSequence(self) -> int: ...
    def SupportsDeviceDetection(self) -> bool: ...
    def UsesDelay(self) -> bool: ...
    def __enter__(self) -> XYStageInstance: ...
    def __exit__(self, *args) -> None: ...
    def __init__(
        self,
        arg0: MockCMMCore,
        arg1: LoadedDeviceAdapter,
        arg2: str,
        arg3: Device,
        arg4: typing.Callable,
        arg5: str,
        arg6: Logger,
        arg7: Logger,
    ) -> None: ...

DEVICE_INTERFACE_VERSION: int = 71
